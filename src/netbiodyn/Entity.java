/* This file is part of NetBioDyn.
 *
 *   NetBioDyn is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 3 of the License, or
 *   any later version.
 *
 *   NetBioDyn is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with NetBioDyn; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
/*
 * Entite.java
 * 
 * Created on 23 oct. 2007, 10:22:08
 * 
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package netbiodyn; // Creation of a package, this line indicating that the actual file will be in this package

import java.awt.image.BufferedImage; // Possibility to create an image with an accessible buffer of image data (a buffered image)
import java.util.ArrayList; //Possible creation of tables
import java.util.HashMap; //Possible creation of hashmaps

/**
 *
 * @author ballet
 */

public class Entity extends ProtoSimplexel {

	//Creation of a new Entity, by initialization of its components
    public Entity() {
        initComponents();
    }

    //Clone of the Entity already existing (with "this" in parameter of this function)
    public Entity clone() {
        Entity reaxel = new Entity(); // Creation of a new Entity
        //Retrieval of object parameters
        reaxel.setEtiquettes(getEtiquettes());
        reaxel.Couleur=Couleur;
        reaxel._visibleDansPanel=_visibleDansPanel;
        reaxel.Vidable=Vidable;
        reaxel.DemieVie=DemieVie;
        reaxel._forme = _forme;
        reaxel._taille = _taille;
        if (BackgroundImage != null) {
            reaxel._str_image_deco=_str_image_deco;
        }
        return reaxel; //Return the new Entity
    }

    //Save of all informations of Entity (with "this" in parameter of this function)
    public ArrayList<String> toSave() {
        ArrayList<String> toSave = super.toSave(); //creation of the variable that will contain all informations
        toSave.add(new String("\tforme:").concat(((Integer) this._forme).toString()) + "\n"); //concatenate in a String a "tag" indicating the shape, and the integer value of this shape (converted to string), and finally a line wrap
        toSave.add(new String("\ttaille:").concat(((Integer) this._taille).toString()) + "\n"); //concatenate in a String a "tag" indicating the size, and the integer value of this size (converted to string), and finally a line wrap
        if (BackgroundImage != null) {
            toSave.add("\tImage:" + _str_image_deco + "\n"); //if a background image is in the Entity parameters, put it and finish with a line wrap
        }
        return toSave; //return the table containing all the informations
    }

    //Return the value of a window ?
    public int getTailleFenetre() {
        return _tailleFenetre;
    }

    //Put a new value to the value of a window ?
    public void setTailleFenetre(int t) {
        _tailleFenetre = t;
    }

    public double Proportion = 1; 
    public BufferedImage BackgroundImage; //Possibility to have a background image for this Entity
    int _tailleFenetre = 100; //Definition of the size of a window ?
    public int _taille = 0; // Definition of the size of the Entity (0 : tall, 1 : medium, 2 : small)
    public int _forme = 1; //Definition of the shape of the Entity (0 : circle, 1 : square, 2 : triangle, 3 : diamond, 4 : star, 5 : pea, 6 : noise)
    public String _str_image_deco = new String(""); //Definition of a background image ?
    int _nbPosAngulaires = 1; // 1 "PosAngulaire" is possible by default

    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    /**
    * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane(); // Creation of a JScrollPane (scrollable view of a lightweight component) 
        jTextArea1 = new javax.swing.JTextArea(); // Creation of a JTextArea (multi-line area that displays plain text)

        jTextArea1.setColumns(30);//The JTextArea can contain 30 characters by line
        jTextArea1.setRows(5); // The JTextArea can contain 5 lines of characters
        jScrollPane1.setViewportView(jTextArea1); //The JTextArea can be scrollable
    }



}

